# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function (${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {${2}}${3:;}
snippet ff
	${1} = function (${2}) {
		${3: // body...}
	};
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${4}
	}${3:,}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
	case ${3:case}:
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
	}
# case
snippet case
	case ${1:case}:
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${3:i} = 0, ${1:tl} = ${2:Things}.length; $3 < $1; $3 ${4: += 1}) {
		${5:$2[$3]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	}
# for (var ... in ...) {...}
snippet ffor
	for (var ${2:i} in ${1:Things}) {
		${3:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# setTimeout function
snippet timeout
	setTimeout(${2:function () {${3}}}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
snippet geti
	getElementById('${1}')${2}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# define a variable variable
snippet var
	var ${1:varName} = ${2:varValue};
# Function variable
snippet fvar
	var ${1:functionName} = function (${2}){
	${3:/* code */
	}};
# Object variable
snippet ovar
	var ${1:objectName} = {
		${2:propertyName}: ${3:propertyValue}
	};
# Create object instance
snippet new
	new ${1:Array()}
# Try, catch
snippet try
	try {
	${1:/* code */}
	} catch (e) {
	${2:/* code */}
	}
# Create object
snippet ob
	{
		${1:propertyName}: ${2:propertyValue}
	};

snippet cl
	console.log(${1});

snippet ci
	console.info(${1});

snippet ce
	console.error(${1});

snippet ucls
	(function () {
		ustream.classes.${1:`Filename('')`} = $.klass({
			initialize:	function () {
				${2}
			}
		});
	}());

snippet uext
	(function () {
		ustream.classes.${1:`Filename('')`} = ustream.classes.${2:sourceClass}({
			initialize:	function () {
				${3:this.parent();}
			}
		});
	}());
